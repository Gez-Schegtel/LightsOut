Object subclass: #Jugador	instanceVariableNames: 'nombre'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Jugador commentStamp: 'Juancho 11/23/2022 17:20' prior: 0!Clase encargada de registrar el nombre del usuario.!!Jugador methodsFor: 'initialize' stamp: 'Mauri 11/23/2022 15:41'!initialize |jugador|jugador:=nil.[jugador isNil or: jugador='']whileTrue:[ jugador:= (UIManager default request: 'Ingrese su Nombre o Alias')].self nombre: jugador! !!Jugador methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 10:58'!nombre	^ nombre! !!Jugador methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 10:58'!nombre: anObject	nombre := anObject! !Object subclass: #LightsOut	instanceVariableNames: ''	classVariableNames: 'Juego Juga Table Ventana'	poolDictionaries: ''	category: 'Lights Out'!!LightsOut commentStamp: 'Juani 11/17/2022 23:58' prior: 0!Juego Lights Out. Esta clase se encarga de iniciar la pantalla de bienvenida.!!LightsOut methodsFor: 'initialization' stamp: 'Mauri 11/23/2022 17:07'!initialize "Es el encargado de manejar nuestro juego"|opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LightsOut class	instanceVariableNames: ''!!LightsOut class methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 18:48'!terminarJuego	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	! !SimpleSwitchMorph subclass: #Luz	instanceVariableNames: 'comportamientoCursor'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Luz commentStamp: 'Juani 11/18/2022 00:01' prior: 0!Clase encargada de la creación de las luces. Se encarga de la estética de las mismas, como así también a su estado inicial (prendida/apagada).!!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:28'!mouseUp: anEvent	self toggleState.	comportamientoCursor value ! !!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:26'!comportamientoCursor: aBlock	comportamientoCursor := aBlock! !!Luz methodsFor: 'initialization' stamp: 'Juannie 11/16/2022 18:45'!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryDarkGray .	offColor := Color lightGreen .	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !Object subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks jugador'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Partida commentStamp: 'Juancho 11/21/2022 23:54' prior: 0!Clase encargada de pedir los datos.!!Partida methodsFor: 'initialize' stamp: 'Mauri 11/23/2022 17:06'!initialize "Encargado de mostrar los mensajes por pantalla y almacenar los valores"|opcion|opcion:=nil.jugador:=Jugador new.[ opcion isNil  ]whileTrue:[opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonal' 'Aleatorio') values: #(1 2 3 4) lines: #(1 2 3 4) message:'Seleccione un modo de juego' title:'Lights Out')].self modoJuego: opcion.self tamaño.! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:03'!cantClicks: anObject	cantClicks := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 17:08'!cantClicks"Muestra el mensaje de fin de juego"	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:41'!dimensionTablero: anObject	dimensionTablero := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 23:23'!tamaño"Se pide al usuario que elija el tamaño del tablero"|tam|tam:=nil.[ tam isNil ]whileTrue: [tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) message:'Seleccione el tamaño del tablero' title:'Lights Out')].	^dimensionTablero:=tam! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 19:02'!modoJuego: anObject	modoJuego := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 11:07'!jugador	^ jugador! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:50'!modoJuego	^ modoJuego! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:55'!dimensionTablero 	^ dimensionTablero ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Partida class	instanceVariableNames: 'tamaño'!BorderedMorph subclass: #Tablero	instanceVariableNames: 'celdas tamaño contadorDeClicks modoJuego cambiarLuz'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Tablero commentStamp: 'Juani 11/18/2022 00:00' prior: 0!La clase T ablero es la encargada de inicializar el tablero, de los distintos modos de juego como así también de controlar si el jugador completó la partida.!!Tablero methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 23:22'!crearTablero "Es nuestro initialize pero lo llamamos una vez que le pasamos los valores del tamaño del tablero y modo de juego" |luz lado |	self tamaño.	self useRoundedCorners.	self tamaño.	luz := Luz new.	lado:= luz width.	self bounds: (0@0 extent: (lado * tamaño) @ (lado * tamaño)+ (2* borderWidth) ).	self color: Color black.		celdas:= Array2D new: tamaño tabulate: [ :i :j | self  nuevaluz: i at: j  ].	contadorDeClicks:=1.	! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:11'!contadorDeClicks	^ contadorDeClicks! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:13'!tamaño: anObject	tamaño := anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 23:24'!contadorDeClicks: anObject	contadorDeClicks := contadorDeClicks+anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 20:20'!tamaño	^ tamaño! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego: anObject	modoJuego := anObject! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego	^ modoJuego! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:22'!cambiarLuzDiagonal: i at: j"Prende o apaga las luces en diagonal de la luz precionada"	((i=1) and: (j<tamaño))ifTrue:[ (celdas at: i + 1 at: j + 1) toggleState ].	((i=1) and: (j>1))ifTrue:[ (celdas at: i + 1 at: j - 1) toggleState ]. 	((i=tamaño) and: (j<tamaño))ifTrue:[(celdas at: i - 1 at: j + 1) toggleState].	((i=tamaño) and: (j>1))ifTrue:[(celdas at: i - 1 at: j - 1) toggleState]. 	((j=1) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j + 1) toggleState.													(celdas at: i + 1 at: j + 1) toggleState].	((j=tamaño) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j - 1) toggleState.													(celdas at: i + 1 at: j - 1) toggleState].	((j between: 2  and: tamaño-1) & (i between: 2  and: tamaño-1 ))ifTrue:[														(celdas at: i - 1 at: j - 1) toggleState.														(celdas at: i - 1 at: j + 1) toggleState.														(celdas at: i + 1 at: j - 1) toggleState.														(celdas at: i + 1 at: j + 1) toggleState].	self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:26'!nuevaluz: i at: j"Instanciamos una nueva luz y le asignamos una posicion en nuestro arreglo "	| luz origen |	luz := Luz new.	origen := self innerBounds origin.	self addMorph: luz.	luz position: ((i - 1) * luz width) @ ((j - 1) * luz height) + origen.		luz comportamientoCursor: [ self cambiarLuz: i at: j ].		^ luz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/23/2022 11:19'!cambiarLuz:i at:j"Depende del modo de juego que se eligio anteriormente se apagan o se prenden las luces segun el modo de juego"	(self modoJuego=1)ifTrue: [ self cambiarLuzOriginal: i at: j ].	(self modoJuego=2)ifTrue: [ self cambiarLuzfilaColumna: i at: j ].	(self modoJuego=3)ifTrue:[ self cambiarLuzDiagonal:i at:j ].	(self modoJuego=4)ifTrue:[ self cambiarLuzAleatorio: i at: j ].^ cambiarLuz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/23/2022 11:49'!cambiarLuzAleatorio: i at: j"Cambia las luces aleatoriamente.Es una mezcla de los modos de juegos anteriores"|a|a:=#(1 2 3 4 5)atRandom.(a=1)ifTrue: [ self cambiarLuzOriginal: i at: j ]ifFalse:[(a=2)ifTrue:[ 1 to: self tamaño do: [ :x| (celdas at: i at:x)toggleState .self recorrerLuces ] ]	ifFalse:[(a=3)ifTrue:[ 1 to: self tamaño do: [ :y| (celdas at: y at:j)toggleState .self recorrerLuces ]]	ifFalse:[(a=4)ifTrue:[self cambiarLuzfilaColumna: i at: j]	ifFalse:[self cambiarLuzDiagonal: i at:j]]]].! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:21'!cambiarLuzOriginal: i at: j"Prende o apaga las luces del modo de juego original,es decir las adyacentes"	(i > 1) ifTrue: [ (celdas at: i - 1 at: j) toggleState ].		(i < tamaño ) ifTrue: [ (celdas at: i + 1 at: j) toggleState ].		(j > 1) ifTrue: [ (celdas at: i at: j - 1) toggleState ].		(j < tamaño) ifTrue: [ (celdas at: i at: j + 1) toggleState ].		self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:21'!cambiarLuzfilaColumna: i at: j"Prende o apaga las luces en la fila y columna de la luz precionada"	1 to: tamaño do: [ :x| (celdas at: i at:x)toggleState  ].	1 to: tamaño do: [ :y| (celdas at: y at:j)toggleState  ].	self recorrerLuces! !!Tablero methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 23:24'!cerrar"Borrar el tablero"^self delete ! !!Tablero methodsFor: 'condiciónDeCierre' stamp: 'Mauri 11/21/2022 23:26'!recorrerLuces "Recorremos las luces para verificar si estan todas apagadas"	| bandera |	bandera:= true.	1 to: tamaño do: [ :i | 		1 to: tamaño do: [ :j | (celdas at: i at: j) isOn ifFalse: [ bandera := false ] ] ].		bandera ifFalse: [ self contadorDeClicks:1 ].	bandera ifTrue: [LightsOut terminarJuego].! !